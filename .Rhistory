library(community)
devtools::install('../community')
library(community)
site_build(".", serve = TRUE, open_after = TRUE, aggregate = FALSE)
library(community)
site_build(".", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
devtools::install('../community')
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
library(community)
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
data_add(
structure(files, names = gsub("^docs/data/|\\.csv\\.xz$", "", files)),
meta = list(
ids = list(variable = "ID"),
time = "time",
variables = "docs/data/measure_info.json"
),
dir = "docs/data"
)
## unify original files
datasets <- "data/distribution"
data_reformat_sdad(
datasets, "docs/data", metadata = entities,
entity_info = NULL, overwrite=TRUE
)
entities <- vroom::vroom("docs/data/custom_entity.csv")
# check data and measure info
check_repository(dataset = structure(entities$region_type, names = entities$geoid))
## unify original files
datasets <- "data/distribution"
data_reformat_sdad(
datasets, "docs/data", metadata = entities,
entity_info = NULL, overwrite=TRUE
)
data_add(
structure(files, names = gsub("^docs/data/|\\.csv\\.xz$", "", files)),
meta = list(
ids = list(variable = "ID"),
time = "time",
variables = "docs/data/measure_info.json"
),
dir = "docs/data"
)
init_repository('.')
?check_repository
# check data and measure info
check_repository(dataset = structure(entities$region_type, names = entities$geoid), exclude=c('sdc.broadband.acs', 'sdc.broadband.ookla', 'sdc.broadband.broadbandnow'))
data_reformat_sdad(
datasets, "docs/data", metadata = entities,
entity_info = NULL, overwrite=TRUE
)
?data_reformat_sdad
data_reformat_sdad(
datasets, "docs/data", metadata = entities,
entity_info = NULL, overwrite=TRUE
)
data_reformat_sdad(
datasets, "docs/data", metadata = entities,
entity_info = NULL, overwrite=TRUE
)
## unify original files
datasets <- "data/Accessibility/Average Download Speed/data/distribution"
data_reformat_sdad(
datasets, "docs/data", metadata = entities,
entity_info = NULL, overwrite=TRUE
)
entities
entities <- vroom::vroom("docs/data/custom_entity.csv")
# check data and measure info
check_repository(dataset = structure(entities$region_type, names = entities$geoid), exclude=c('sdc.broadband.acs', 'sdc.broadband.ookla', 'sdc.broadband.broadbandnow'))
data_reformat_sdad(
datasets, "docs/data", metadata = entities,
entity_info = NULL, overwrite=TRUE
)
info <- lapply(
list.files(datasets, "measure_info\\.json", full.names = TRUE),
jsonlite::read_json
)
agg_info <- list()
for (m in info) {
for (e in names(m)) {
agg_info[[e]] <- if (e %in% names(agg_info)) c(agg_info[[e]], m[[e]]) else m[[e]]
}
}
if (length(agg_info)) {
jsonlite::write_json(agg_info, "docs/data/measure_info.json", auto_unbox = TRUE, pretty = TRUE)
}
## add unified files
files <- paste0("docs/data/", list.files("docs/data/", "\\.csv\\.xz$"))
### make complete maps
dir.create("docs/maps", FALSE)
map_files <- list.files("docs/maps")
if (!length(map_files)) {
if (!require(catchment)) {
remotes::install_github("uva-bi-sdad/catchment")
library(catchment)
}
ids <- unique(unlist(lapply(files, function(f) {
unique(vroom::vroom(f, col_select = "ID", show_col_types = FALSE)[[1]])
})))
# states <- unique(substring(ids[
#   ids %in% entities$geoid[entities$region_type %in% c("county", "tract", "block group")]
# ], 1, 2))
states <- unique(substring(ids,1,2))
years <- as.numeric(unique(unlist(lapply(files, function(f) {
unique(vroom::vroom(f, col_select = "time", show_col_types = FALSE)[[1]])
}))))
years[years > 2022] = 2022
for (y in years) {
for (l in c("county", "tract", "bg")) {
f <- paste0("docs/maps/", l, "_", y, ".geojson")
if (!file.exists(f)) {
ms <- do.call(rbind, lapply(states, function(s) {
download_census_shapes(
fips = s, entity = l, name = paste0(l, y, s), year = y
)[, "GEOID", drop = FALSE]
}))
sf::st_write(ms, f)
}
}
}
}
data_add(
structure(files, names = gsub("^docs/data/|\\.csv\\.xz$", "", files)),
meta = list(
ids = list(variable = "ID"),
time = "time",
variables = "docs/data/measure_info.json"
),
dir = "docs/data"
)
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
remotes::install_github("uva-bi-sdad/community")
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
library(community)
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
library(community)
entities <- vroom::vroom("docs/data/custom_entity.csv")
## unify original files
datasets <- "data/Accessibility/Average Download Speed/data/distribution"
data_add(
structure(files, names = gsub("^docs/data/|\\.csv\\.xz$", "", files)),
meta = list(
ids = list(variable = "ID"),
time = "time",
variables = "docs/data/measure_info.json"
),
dir = "docs/data"
)
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
library(community)
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
library(community)
# check data and measure info
check_repository(dataset = structure(entities$region_type, names = entities$geoid), exclude=c('sdc.broadband.acs', 'sdc.broadband.ookla', 'sdc.broadband.broadbandnow'))
data_add(
structure(files, names = gsub("^docs/data/|\\.csv\\.xz$", "", files)),
meta = list(
ids = list(variable = "ID"),
time = "time",
variables = "docs/data/measure_info.json"
),
dir = "docs/data"
)
site_build("../sdc.broadband.alga_dev", serve = TRUE, open_after = TRUE, aggregate = FALSE, version="local")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
